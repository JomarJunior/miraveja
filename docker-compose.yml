services:
  # ---------------------------
  # Reverse Proxy
  # ---------------------------
  traefik:
    image: traefik:v3.5.3
    env_file:
      - .env                                                # Load environment variables from .env file
    ports:
      - "${TRAEFIK_WEB_PORT}:80"                            # HTTP port
      - "${TRAEFIK_WEB_SECURE_PORT}:443"                    # HTTPs port
      - "${TRAEFIK_DASHBOARD_PORT}:8080"                    # Traefik dashboard port (optional) !!!!!
    volumes:
      - ./config/traefik:/etc/traefik:ro                    # Traefik configuration file
      - //var/run/docker.sock:/var/run/docker.sock:ro       # So that Traefik can listen to the Docker events
      - traefik_ssl_certs:/ssl-certs                        # For SSL certificates
    networks:
      - miraveja                                            # Connect to the miraveja network

  # ---------------------------
  # Database
  # ---------------------------
  postgres:
    image: postgres:18.0-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - miraveja

  # ---------------------------
  # Object Storage
  # ---------------------------
  minio:
    image: quay.io/minio/minio:RELEASE.2024-09-13T20-26-02Z
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    env_file:
      - .env
    networks:
      - miraveja

  # ---------------------------
  # Vector Database
  # ---------------------------
  qdrant:
    image: qdrant/qdrant:dev-3be4ca880519be040c45baafacd06f4dd4aee080
    ports:
      - "${QDRANT_PORT}:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    env_file:
      - .env
    networks:
      - miraveja

  # ---------------------------
  # Kafka + Zookeeper
  # ---------------------------
  kafka:
    image: bitnami/kafka:3.5
    ports:
      - "${KAFKA_PORT}:9092"
    env_file:
      - .env
    depends_on:
      - zookeeper
    networks:
      - miraveja

  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    env_file:
      - .env
    networks:
      - miraveja

  # ---------------------------
  # Authentication (Keycloak)
  # ---------------------------
  keycloak:
    image: quay.io/keycloak/keycloak:26.4
    command: start-dev
    ports:
      - ${KEYCLOAK_PORT}:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${APPLICATION_HOST}`) && PathPrefix(`/${KC_BASE_PATH}`)"
      - "traefik.http.routers.keycloak.entrypoints=web,websecure"
      - "traefik.http.services.keycloak.loadbalancer.server.port=${KEYCLOAK_PORT}"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=staging"
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - miraveja

  # ---------------------------
  # Backend API
  # ---------------------------
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${APPLICATION_HOST}`) && PathPrefix(`/${API_BASE_PATH}`)"
      - "traefik.http.routers.api.entrypoints=web,websecure"
      - "traefik.http.services.api.loadbalancer.server.port=${API_PORT}"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=staging"
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./api/:/app
    depends_on:
      - postgres
      - minio
      - qdrant
      - kafka
      - keycloak
    networks:
      - miraveja
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT}/${API_BASE_PATH}/health"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  # ---------------------------
  # Worker Service
  # ---------------------------
  #worker:
  #  build: ./worker
  #  environment:
  #    DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
  #    MINIO_ENDPOINT: http://minio:${MINIO_API_PORT}
  #    MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
  #    MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
  #    QDRANT_URL: http://qdrant:${QDRANT_PORT}
  #    KAFKA_BROKER: kafka:${KAFKA_PORT}
  #  depends_on:
  #    - kafka
  #    - minio
  #    - qdrant
  #  networks:
  #    - miraveja

  # ---------------------------
  # Frontend
  # ---------------------------
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${APPLICATION_HOST}`) && (PathPrefix(`/${FRONTEND_BASE_PATH}`))"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=${FRONTEND_PORT}"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=staging"
    depends_on:
      - api
    volumes:
      - ./client/:/app
      - app_node_modules:/app/node_modules
    networks:
      - miraveja

# ---------------------------
# Volumes
# ---------------------------
volumes:
  traefik_ssl_certs:
    driver: local
  postgres_data:
  minio_data:
  qdrant_data:
  app_node_modules:

# ---------------------------
# Networks
# ---------------------------
networks:
  miraveja:
    driver: bridge
